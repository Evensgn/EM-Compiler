
func foo $d $x $y {
%foo_entry:
    $vreg = move $d
    $vreg = mul $vreg 1000
    $vreg_2 = move $x
    $vreg_2 = mul $vreg_2 10
    $vreg_3 = move $vreg
    $vreg_3 = add $vreg_3 $vreg_2
    $vreg_4 = move $vreg_3
    $vreg_4 = add $vreg_4 $y
    call printlnInt $vreg_4 
    $vreg_5 = seq $d 1
    br $vreg_5 %if_then %if_after

%if_after:
    $t = move $x
    $x = move $y
    $y = move $t
    $vreg_6 = call foo 1 $x $y 
    $vreg_7 = move $d
    $vreg_7 = mul $vreg_7 1000
    $vreg_8 = move $x
    $vreg_8 = mul $vreg_8 10
    $vreg_9 = move $vreg_7
    $vreg_9 = add $vreg_9 $vreg_8
    $vreg_10 = move $vreg_9
    $vreg_10 = add $vreg_10 $y
    call printlnInt $vreg_10 
    jump %foo_end

%if_then:
    jump %foo_end

%foo_end:
    ret 0

}

func main {
%main_entry:
    jump %__init_func_entry

%__init_func_entry:
    $a = move 3100
    $b = move 0
    $c = move 1
    $b = move 0
    jump %for_cond

%for_cond:
    $vreg = slt $b 100000000
    br $vreg %for_body %for_after

%for_body:
    $vreg_2 = move $c
    $vreg_2 = mul $vreg_2 2
    $vreg_3 = move $vreg_2
    $vreg_3 = sub $vreg_3 $c
    $c = move $vreg_3
    jump %for_step

%for_step:
    $b = add $b 1
    jump %for_cond

%for_after:
    call printlnInt $a 
    $vreg_4 = call cost_a_lot_of_time 
    $vreg_5 = call foo 7 5 3 
    $aa = move 0
    $vreg_6 = move 10
    $vreg_6 = mul $vreg_6 8
    $vreg_6 = add $vreg_6 8
    $vreg_6 = alloc $vreg_6
    store 8 $vreg_6 10 0
    $vreg_7 = move $vreg_6
    $bb = move $vreg_7
    $vreg_8 = move 2
    $vreg_8 = mul $vreg_8 8
    $vreg_8 = add $vreg_8 8
    $vreg_8 = alloc $vreg_8
    store 8 $vreg_8 2 0
    $vreg_9 = move $vreg_8
    $cc = move $vreg_9
    ret 0

}

func cost_a_lot_of_time {
%cost_a_lot_of_time_entry:
    $a = move 3100
    $b = move 0
    $c = move 1
    $b = move 0
    jump %for_cond_2

%for_cond_2:
    $vreg = slt $b 100000000
    br $vreg %for_body_2 %for_after_2

%for_after_2:
    call printlnInt $a 
    ret 0

%for_body_2:
    $vreg_2 = move $c
    $vreg_2 = mul $vreg_2 2
    $vreg_3 = move $vreg_2
    $vreg_3 = sub $vreg_3 $c
    $c = move $vreg_3
    jump %for_step_2

%for_step_2:
    $b = add $b 1
    jump %for_cond_2

}

