@ ProgramNode (1:0):
>>> decls:
    @ ClassDeclNode (1:0):
    >>> name: Fibonacci
    >>> varMember:
        @ VaeDeclNode (2:5):
        >>> type:
            @ TypeNode (2:1):
            >>> type: PrimitiveType(INT)
        >>> name: x
        >>> init: null
        @ VaeDeclNode (3:5):
        >>> type:
            @ TypeNode (3:1):
            >>> type: PrimitiveType(INT)
        >>> name: result
        >>> init: null
    >>> funcMember:
        @ FuncDeclNode (5:1):
        >>> isContruct: false
        >>> returnType:
            @ TypeNode (5:1):
            >>> type: PrimitiveType(VOID)
        >>> name: reset
        >>> parameterList: null
        >>> body:
            @ BlockStmtNode (5:13):
            >>> stmtsAndVarDecls:
                @ ExprStmtNode (6:2):
                >>> expr:
                    @ AssignExprNode (6:2):
                    >>> lhs:
                        @ IdentifierExprNode (6:2):
                        >>> identifier: x
                    >>> rhs:
                        @ IntConstExprNode (6:6):
                        >>> value: 0
                @ ExprStmtNode (7:2):
                >>> expr:
                    @ AssignExprNode (7:2):
                    >>> lhs:
                        @ IdentifierExprNode (7:2):
                        >>> identifier: result
                    >>> rhs:
                        @ IntConstExprNode (7:11):
                        >>> value: 0
        @ FuncDeclNode (10:1):
        >>> isContruct: false
        >>> returnType:
            @ TypeNode (10:1):
            >>> type: PrimitiveType(VOID)
        >>> name: set_problem
        >>> parameterList:
            @ VaeDeclNode (10:18):
            >>> type:
                @ TypeNode (10:18):
                >>> type: PrimitiveType(INT)
            >>> name: x_in
            >>> init: null
        >>> body:
            @ BlockStmtNode (10:27):
            >>> stmtsAndVarDecls:
                @ ExprStmtNode (11:2):
                >>> expr:
                    @ FuncCallExprNode (11:2):
                    >>> func:
                        @ IdentifierExprNode (11:2):
                        >>> identifier: reset
                    >>> args: null
                @ ExprStmtNode (12:2):
                >>> expr:
                    @ AssignExprNode (12:2):
                    >>> lhs:
                        @ IdentifierExprNode (12:2):
                        >>> identifier: x
                    >>> rhs:
                        @ IdentifierExprNode (12:6):
                        >>> identifier: x_in
        @ FuncDeclNode (15:1):
        >>> isContruct: false
        >>> returnType:
            @ TypeNode (15:1):
            >>> type: PrimitiveType(INT)
        >>> name: calc
        >>> parameterList:
            @ VaeDeclNode (15:10):
            >>> type:
                @ TypeNode (15:10):
                >>> type: PrimitiveType(INT)
            >>> name: cur_num
            >>> init: null
        >>> body:
            @ BlockStmtNode (15:22):
            >>> stmtsAndVarDecls:
                @ CondStmtNode (16:2):
                >>> cond:
                    @ BinaryExprNode (16:6):
                    >>> op: EQUAL
                    >>> lhs:
                        @ IdentifierExprNode (16:6):
                        >>> identifier: cur_num
                    >>> rhs:
                        @ IntConstExprNode (16:17):
                        >>> value: 0
                >>> thenStmt:
                    @ ReturnStmtNode (17:3):
                    >>> expr:
                        @ IntConstExprNode (17:10):
                        >>> value: 1
                >>> elseStmt:
                    @ ReturnStmtNode (19:3):
                    >>> expr:
                        @ BinaryExprNode (19:10):
                        >>> op: MUL
                        >>> lhs:
                            @ IdentifierExprNode (19:10):
                            >>> identifier: cur_num
                        >>> rhs:
                            @ FuncCallExprNode (19:20):
                            >>> func:
                                @ IdentifierExprNode (19:20):
                                >>> identifier: calc
                            >>> args:
                                @ BinaryExprNode (19:25):
                                >>> op: SUB
                                >>> lhs:
                                    @ IdentifierExprNode (19:25):
                                    >>> identifier: cur_num
                                >>> rhs:
                                    @ IntConstExprNode (19:33):
                                    >>> value: 1
        @ FuncDeclNode (22:1):
        >>> isContruct: false
        >>> returnType:
            @ TypeNode (22:1):
            >>> type: PrimitiveType(INT)
        >>> name: get_result
        >>> parameterList: null
        >>> body:
            @ BlockStmtNode (22:17):
            >>> stmtsAndVarDecls:
                @ ExprStmtNode (23:2):
                >>> expr:
                    @ AssignExprNode (23:2):
                    >>> lhs:
                        @ IdentifierExprNode (23:2):
                        >>> identifier: result
                    >>> rhs:
                        @ FuncCallExprNode (23:11):
                        >>> func:
                            @ IdentifierExprNode (23:11):
                            >>> identifier: calc
                        >>> args:
                            @ IdentifierExprNode (23:16):
                            >>> identifier: x
                @ ReturnStmtNode (24:2):
                >>> expr:
                    @ IdentifierExprNode (24:9):
                    >>> identifier: result
    @ FuncDeclNode (28:0):
    >>> isContruct: false
    >>> returnType:
        @ TypeNode (28:0):
        >>> type: PrimitiveType(INT)
    >>> name: main
    >>> parameterList: null
    >>> body:
        @ BlockStmtNode (28:10):
        >>> stmtsAndVarDecls:
            @ ExprStmtNode (30:1):
            >>> expr:
                @ AssignExprNode (30:1):
                >>> lhs:
                    @ IdentifierExprNode (30:1):
                    >>> identifier: teacher
                >>> rhs:
                    @ NewExprNode (30:15):
                    >>> newType:
                        @ TypeNode (30:15):
                        >>> type: ClassType(Fibonacci)
                    >>> numDim: 0
            @ ForStmtNode (32:1):
            >>> init:
                @ AssignExprNode (32:6):
                >>> lhs:
                    @ IdentifierExprNode (32:6):
                    >>> identifier: x
                >>> rhs:
                    @ IntConstExprNode (32:10):
                    >>> value: 0
            >>> cond:
                @ BinaryExprNode (32:13):
                >>> op: LESS
                >>> lhs:
                    @ IdentifierExprNode (32:13):
                    >>> identifier: x
                >>> rhs:
                    @ IntConstExprNode (32:17):
                    >>> value: 5
            >>> step:
                @ SuffixExprNode (32:20):
                >>> op: SUFFIX_INC
                >>> expr:
                    @ IdentifierExprNode (32:20):
                    >>> identifier: x
            >>> stmt:
                @ BlockStmtNode (32:24):
                >>> stmtsAndVarDecls:
                    @ ExprStmtNode (33:2):
                    >>> expr:
                        @ FuncCallExprNode (33:2):
                        >>> func:
                            @ MemberAccessExprNode (33:2):
                            >>> expr:
                                @ IdentifierExprNode (33:2):
                                >>> identifier: teacher
                            >>> member: set_problem
                        >>> args:
                            @ IdentifierExprNode (33:22):
                            >>> identifier: x
                    @ ExprStmtNode (34:2):
                    >>> expr:
                        @ FuncCallExprNode (34:2):
                        >>> func:
                            @ IdentifierExprNode (34:2):
                            >>> identifier: println
                        >>> args:
                            @ FuncCallExprNode (34:10):
                            >>> func:
                                @ IdentifierExprNode (34:10):
                                >>> identifier: toString
                            >>> args:
                                @ FuncCallExprNode (34:19):
                                >>> func:
                                    @ MemberAccessExprNode (34:19):
                                    >>> expr:
                                        @ IdentifierExprNode (34:19):
                                        >>> identifier: teacher
                                    >>> member: get_result
                                >>> args: null
            @ ReturnStmtNode (36:1):
            >>> expr:
                @ IntConstExprNode (36:8):
                >>> value: 0
